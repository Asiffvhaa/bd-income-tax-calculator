{"version":3,"sources":["TopNav.js","UserInformation.js","SalaryInformation.js","Company.js","CompanyList.js","LeftSideContent.js","RightSideContent.js","App.js","index.js"],"names":["TopNav","props","useState","disclaimer","setDisclaimer","howTo","setHowTo","handleDisclaimerClose","handleHowToClose","lifetime","daily","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","onClick","Text","target","rel","data-ribbon","title","Modal","show","keyboard","animation","onHide","backdrop","Header","closeButton","Title","Body","Footer","Button","UserInformation","handleInputChange","privilege","ageGroup","lowerBound","minimumTax","values","setValues","privilegeRef","useRef","ageGroupRef","minimumTaxRef","handleChange","field","value","prevState","current","calculateLowerBound","parseInt","Row","Col","xs","onSubmit","e","preventDefault","Form","Group","Control","as","ref","onChange","defaultValue","type","min","placeholder","SalaryInformation","companyNameRef","monthsRef","totalFestivalsRef","inputTypeRef","companyInfoRef","salaryInputRef","basicRef","houseRef","medicalRef","conveyanceRef","lfaRef","festivalRef","otherTaxableRef","initialCompanyInfo","company","months","festivals","inputType","name","resetForms","reset","calculateTaxableOf","basic","percent","max","received","atMax","Math","calculateMaxExemptionOf","trim","style","display","alert","festivalMultiplier","basicMultiplier","map","i","house","medical","conveyance","lfa","festival","others","houseMax","medicalMax","conveyanceMax","amounts","Date","getTime","yearly","exempted","taxable","calculateTaxableAmount","Table","size","Company","paddingTop","borderTop","gross","net_exempted","net_taxable","colSpan","window","confirm","removeCompany","block","CompanyList","companies","marginTop","LeftSideContent","RightSideContent","aitRef","investmentRef","ait","investment","totalTaxableAmount","reduce","p","c","maxAllowedInvestment","rebate","taxableIncome","slabs","push","investmentSlabs","length","upperBound","maxInvestmentRebate","netTaxableAmount","maxInvestment","breakdown","next","text","remains","tax","undefined","limit","thisSlab","taxBreakdown","finalLiability","slab","k","App","lifetimeVisitor","dailyVisitor","prev","useEffect","fetch","then","res","json","response","catch","error","console","log","toLocaleDateString","year","month","day","replace","Container","fluid","md","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d3a0b2f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Button, Modal, Nav, Navbar} from \"react-bootstrap\";\nimport 'github-fork-ribbon-css/gh-fork-ribbon.css';\n\nexport default function TopNav(props) {\n    const [disclaimer, setDisclaimer] = useState(false);\n    const [howTo, setHowTo] = useState(false);\n\n    const handleDisclaimerClose = () => setDisclaimer(false);\n    const handleDisclaimerShow = () => setDisclaimer(true);\n\n    const handleHowToClose = () => setHowTo(false);\n    const handleHowToShow = () => setHowTo(true);\n\n    const {lifetime, daily} = props;\n\n    return <>\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand href=\"./\">BD Income tax calculator</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"navbar-nav\"/>\n            <Navbar.Collapse id=\"navbar-nav\">\n                <Nav className=\"mr-1\">\n                    <Nav.Link className=\"text-warning\" onClick={handleDisclaimerShow}>Disclaimer</Nav.Link>\n                </Nav>\n                <Nav className=\"mr-1\">\n                    <Nav.Link className=\"text-info\" onClick={handleHowToShow}>How to use?</Nav.Link>\n                </Nav>\n                <Nav className=\"mr-2\">\n                    <Navbar.Text className=\"text-white\">Lifetime visitor: {lifetime}</Navbar.Text>\n                </Nav>\n                <Nav className=\"mr-2\">\n                    <Navbar.Text className=\"text-white\">Daily Visitor: {daily}</Navbar.Text>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n\n        <a target=\"_blank\" className=\"github-fork-ribbon right-top fixed\"\n           href=\"https://github.com/ssi-anik/bd-income-tax-calculator\"\n           rel=\"noopener noreferrer\"\n           data-ribbon=\"Star me on GitHub\" title=\"Star me on GitHub\">\n            Star me on GitHub\n        </a>\n\n        <Modal show={disclaimer} keyboard={true} animation={false} onHide={handleDisclaimerClose} backdrop=\"static\">\n            <Modal.Header closeButton>\n                <Modal.Title>Disclaimer</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p className=\"text-danger\">\n                    I'm not a Lawyer. I have gone through some sources that are listed below. It's\n                    not guaranteed to be 100% accurate.\n                </p>\n                <hr/>\n                <ul>\n                    <li>\n                        <a rel=\"noopener noreferrer\" href=\"https://youtu.be/PkzN7CTS2F0\" target=\"_blank\">YT Link 1</a>\n                    </li>\n                    <li>\n                        <a rel=\"noopener noreferrer\" href=\"https://youtu.be/MARJMGB083Y\" target=\"_blank\">YT Link 2</a>\n                    </li>\n                    <li>\n                        <a rel=\"noopener noreferrer\" href=\"https://youtu.be/5KFcEvMRwuc\" target=\"_blank\">YT Link 3</a>\n                    </li>\n                </ul>\n                <hr/>\n                <ul>\n                    <li>\n                        <a rel=\"noopener noreferrer\" href=\"https://youtu.be/7QWAmoFLCso\" target=\"_blank\">YT Link 4</a>\n                    </li>\n                </ul>\n                <hr/>\n                <ul>\n                    <li>\n                        <a rel=\"noopener noreferrer\" href=\"https://rb.gy/oajabb\" target=\"_blank\">News Link 1</a>\n                    </li>\n                </ul>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleDisclaimerClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n\n        <Modal show={howTo} keyboard={true} animation={false} onHide={handleHowToClose} backdrop=\"static\">\n            <Modal.Header closeButton>\n                <Modal.Title>How to use?</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p className=\"text-success\">\n                    All the calculations are done in front-end/browser. No data is being sent to the backend or server.\n                    If you reload the page, all the data will be gone from the page. And all the calculations are done\n                    in the realtime. So, you can change the values.\n                </p>\n                <hr/>\n                <p className=\"text-info\">\n                    If you're a developer, then don't forget to click the star button on this repository by clicking\n                    \"Star me on Github\"\n                </p>\n                <hr/>\n                <ul>\n                    <li>Select if you're male, female or have any other privilege</li>\n                    <li>Select your age group.</li>\n                    <li>Input the minimum tax amount applicable for your area.</li>\n                </ul>\n                <hr/>\n                <ul>\n                    <li>Enter the company name you worked for.</li>\n                    <li>Number of months you worked there. Default is 12.</li>\n                    <li>Number of festivals you got within those months. Default is 2.</li>\n                    <li>\n                        If you want to calculate per months basis, select \"Calculate from Monthly\".\n                        Otherwise, you if you have your annual salary certificate, you can calculate from there.\n                    </li>\n                </ul>\n                <hr/>\n                <ul>\n                    <li>Enter the salary breakdown as specified in the fields.</li>\n                    <li>\n                        Festival bonus are multiplied by the no of festivals specified.\n                    </li>\n                    <li>Other taxable bonus are the\n                        total amount of taxable bonus you received like \"Leave encashment\", \"PF\"\n                    </li>\n                    <li>Press Calculate button or reset if you want to calculate or reset.</li>\n                    <li>You can remove existing entry by clicking the remove button under the listing table.</li>\n                    <li>\n                        You can use as many companies as you want. In case you've got an increment in the mid of a FY.\n                    </li>\n                </ul>\n                <hr/>\n                <ul>\n                    <li>\n                        AIT/Advance Income Tax is the tax deducted by the office per month basis.\n                        Insert a value if they did.\n                    </li>\n                    <li>\n                        Allowable investments are the investments that are counted as investment.\n                        Enter the sum of allowed investments.\n                    </li>\n                </ul>\n                <hr/>\n                <p className=\"text-info\">\n                    You'll then be able to see the available information as well as the tax\n                    breakdown.\n                </p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleHowToClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>;\n}","import {useRef, useState} from \"react\";\nimport {Col, Form, Row} from \"react-bootstrap\";\n\nexport default function UserInformation(props) {\n    const {handleInputChange} = props;\n\n    const [values, setValues] = useState({\n        privilege: 'male',\n        ageGroup: 'below',\n        lowerBound: 300000,\n        minimumTax: 5000,\n    });\n\n    const privilegeRef = useRef();\n    const ageGroupRef = useRef();\n    const minimumTaxRef = useRef();\n\n    function calculateLowerBound() {\n        const [privilege, ageGroup] = [privilegeRef.current.value, ageGroupRef.current.value];\n\n        if (privilege === 'specially-abled') {\n            return 450000;\n        } else if (privilege === 'freedom-fighter') {\n            return 475000;\n        } else if (privilege === 'female' || ageGroup === 'above') {\n            return 350000;\n        }\n\n        return 300000;\n    }\n\n    const handleChange = (field, value) => {\n        setValues(prevState => ({\n            ...prevState,\n            [field]: value\n        }));\n\n        handleInputChange('lowerBound', calculateLowerBound());\n        handleInputChange('minimumTax', parseInt(minimumTaxRef.current.value || 0));\n    }\n\n\n    return <Row>\n        <Col xs=\"12\">\n            <form onSubmit={(e) => e.preventDefault()}>\n                <Form.Row>\n                    <Form.Group className=\"col-4\">\n                        <Form.Control as=\"select\" value={values['privilege']}\n                                      ref={privilegeRef}\n                                      onChange={() => handleChange('privilege', privilegeRef.current.value)}>\n                            <option value=\"male\">Male</option>\n                            <option value=\"female\">Female</option>\n                            <option value=\"specially-abled\">Specially-abled</option>\n                            <option value=\"freedom-fighter\">Gazetted freedom fighter</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group className=\"col-4\">\n                        <Form.Control as=\"select\" value={values['ageGroup']}\n                                      ref={ageGroupRef}\n                                      onChange={() => handleChange('ageGroup', ageGroupRef.current.value)}>\n                            <option value=\"below\">Below or 65</option>\n                            <option value=\"above\">Above 65</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group className=\"col-4\">\n                        <Form.Control defaultValue={values['minimumTax']}\n                                      onChange={() => handleChange('minimumTax', minimumTaxRef.current.value)}\n                                      type=\"number\" ref={minimumTaxRef} min=\"0\"\n                                      placeholder=\"Minimum tax in your area\"/>\n                    </Form.Group>\n                </Form.Row>\n            </form>\n        </Col>\n    </Row>;\n}","import {Button, Col, Form, Row, Table} from \"react-bootstrap\";\nimport {useRef, useState} from \"react\";\n\nexport default function SalaryInformation(props) {\n    const [companyNameRef, monthsRef, totalFestivalsRef, inputTypeRef] = [useRef(), useRef(), useRef(), useRef()];\n    const [companyInfoRef, salaryInputRef] = [useRef(), useRef()];\n\n    const [basicRef, houseRef, medicalRef, conveyanceRef] = [useRef(), useRef(), useRef(), useRef()];\n    const [lfaRef, festivalRef, otherTaxableRef] = [useRef(), useRef(), useRef()];\n\n    const initialCompanyInfo = {\n        company: '',\n        months: 12,\n        festivals: 2,\n        inputType: 'monthly'\n    };\n    const [values, setValues] = useState(initialCompanyInfo);\n\n    const handleChange = (name, value) => {\n        setValues(prevState => ({\n            ...prevState,\n            [name]: value\n        }));\n    }\n\n    const resetForms = () => {\n        salaryInputRef.current.reset();\n        // for some reasons, company info refs were not working. IDK\n        setValues({...initialCompanyInfo});\n    }\n\n    const calculateTaxableOf = (basic, percent, max, received) => {\n        const atMax = percent ? Math.min(basic * percent, max) : max;\n        return received > atMax ? received - atMax : 0;\n    }\n\n    const calculateMaxExemptionOf = (basic, percent, max, received) => {\n        const atMax = percent ? Math.min(basic * percent, max) : max;\n        return received > atMax ? atMax : received;\n    }\n\n    const calculateTaxableAmount = () => {\n\n        if (!values['company']) {\n            alert('Add a company name.');\n            return false;\n        }\n\n        let festivalMultiplier = 1;\n        let basicMultiplier = 1;\n        if (values['inputType'] === 'monthly') {\n            festivalMultiplier = values['festivals'];\n            basicMultiplier = values['months'];\n        }\n\n        // already converted to yearly\n        const [basic, house, medical, conveyance, lfa] = [\n            basicRef,\n            houseRef,\n            medicalRef,\n            conveyanceRef,\n            lfaRef,\n        ].map((i) => parseInt(i.current.value || 0, 10) * basicMultiplier);\n        const festival = parseInt(festivalRef.current.value || 0, 10) * festivalMultiplier;\n        const others = parseInt(otherTaxableRef.current.value || 0, 10);\n\n        if (!basic) {\n            alert('Basic salary is zero. Add some data.');\n            return;\n        }\n\n        /**\n         * As the payments are already converted to yearly,\n         * Change the max values to yearly as well.\n         */\n        const [houseMax, medicalMax, conveyanceMax] = [25000, 10000, 2500].map(i => i * monthsRef.current.value);\n\n        const amounts = {\n            id: new Date().getTime(),\n            name: values['company'],\n            months: values['months'],\n            festivals: values['festivals'],\n            inputType: values['inputType'],\n            basic: {\n                yearly: basic,\n                exempted: 0,\n                taxable: basic,\n            },\n            house: {\n                yearly: house,\n                exempted: calculateMaxExemptionOf(basic, 0.5, houseMax, house),\n                taxable: calculateTaxableOf(basic, 0.5, houseMax, house),\n            },\n            medical: {\n                yearly: medical,\n                exempted: calculateMaxExemptionOf(basic, 0.1, medicalMax, medical),\n                taxable: calculateTaxableOf(basic, 0.1, medicalMax, medical),\n            },\n            conveyance: {\n                yearly: conveyance,\n                exempted: calculateMaxExemptionOf(basic, 0, conveyanceMax, conveyance),\n                taxable: calculateTaxableOf(basic, 1, conveyanceMax, conveyance),\n            },\n            lfa: {\n                yearly: lfa,\n                exempted: lfa,\n                taxable: 0,\n            },\n            festival: {\n                yearly: festival,\n                exempted: 0,\n                taxable: festival,\n            },\n            others: {\n                yearly: others,\n                exempted: 0,\n                taxable: others\n            },\n        }\n\n\n        amounts['gross'] = amounts.festival.yearly + amounts.others.yearly +\n            amounts.basic.yearly + amounts.house.yearly +\n            amounts.medical.yearly + amounts.conveyance.yearly + amounts.lfa.yearly;\n\n        amounts['net_exempted'] = amounts.festival.exempted + amounts.others.exempted +\n            amounts.basic.exempted + amounts.house.exempted +\n            amounts.medical.exempted + amounts.conveyance.exempted + amounts.lfa.exempted;\n\n        amounts['net_taxable'] = amounts.festival.taxable + amounts.others.taxable +\n            amounts.basic.taxable + amounts.house.taxable +\n            amounts.medical.taxable + amounts.conveyance.taxable + amounts.lfa.taxable;\n\n        props.handleInputChange(\"companies\", amounts);\n        resetForms();\n    }\n\n    return <Row>\n        <Col xs=\"12\">\n            {/*COMPANY INFORMATION FORM*/}\n            <Form ref={companyInfoRef} onSubmit={e => e.preventDefault()}>\n                <Form.Row>\n                    <Form.Group className=\"col-3\">\n                        <Form.Control ref={companyNameRef} value={values['company']}\n                                      onChange={(e) => handleChange('company', e.target.value.trim())}\n                                      placeholder=\"Company name\"/>\n                        <Form.Text className=\"text-info\">\n                            Company name\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"col-3\">\n                        <Form.Control type=\"number\" min=\"0\" value={values['months']} ref={monthsRef}\n                                      onChange={(e) => handleChange('months', e.target.value)}\n                                      placeholder=\"Months you've worked for\"/>\n                        <Form.Text className=\"text-info\">\n                            Number of months\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"col-2\">\n                        <Form.Control type=\"number\" min=\"0\" value={values['festivals']} ref={totalFestivalsRef}\n                                      onChange={(e) => handleChange('festivals', e.target.value)}\n                                      placeholder=\"No of Festivals\"/>\n                        <Form.Text className=\"text-info\">\n                            Number of festivals\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"col-4\">\n                        <Form.Control as=\"select\" ref={inputTypeRef} value={values['inputType']}\n                                      onChange={(e) => handleChange('inputType', e.target.value)}>\n                            <option value=\"monthly\">Calculate from Monthly</option>\n                            <option value=\"yearly\">Calculate for specified months</option>\n                        </Form.Control>\n                        <Form.Text className=\"text-info\">\n                            Calculation type\n                        </Form.Text>\n                    </Form.Group>\n                </Form.Row>\n            </Form>\n        </Col>\n        {/* Salary Information */}\n        <Col xs=\"12\" style={{display: values['company'] ? 'block' : 'none'}}>\n            <Form ref={salaryInputRef} onSubmit={e => {\n                e.preventDefault();\n                calculateTaxableAmount();\n            }}>\n                <Table size=\"sm\">\n                    <caption>\n                        Earnings\n                        {values['company'] ? ` at \"${values['company']}\"` : ''} -\n                        [{values['months']} months] -\n                        [{values['festivals']} festivals]\n                    </caption>\n                    <thead className=\"thead-dark\">\n                        <tr>\n                            <th>As</th>\n                            <th>Received (BDT.)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Basic</td>\n                            <td>\n                                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                                              ref={basicRef} placeholder=\"Basic pay\"/>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>House rent</td>\n                            <td>\n                                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                                              ref={houseRef} placeholder=\"House rent\"/>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Medical Allowance</td>\n                            <td>\n                                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                                              ref={medicalRef} placeholder=\"Medical Allowance\"/>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Conveyance Allowance</td>\n                            <td>\n                                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                                              ref={conveyanceRef} placeholder=\"Conveyance Allowance\"/>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Leave Fare Assistance</td>\n                            <td>\n                                <Form.Control type=\"number\" min=\"0\" ref={lfaRef} className=\"form-control-sm\"\n                                              placeholder=\"LFA\"/>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Festival Bonus</td>\n                            <td>\n                                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                                              ref={festivalRef} placeholder=\"Festival Bonus\"/>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Other Taxable Bonus</td>\n                            <td>\n                                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                                              ref={otherTaxableRef} placeholder=\"Other total Taxable Bonus\"/>\n                            </td>\n                        </tr>\n                    </tbody>\n                </Table>\n\n                <Button onClick={resetForms} variant=\"warning\" size=\"sm\" className=\"float-left\">\n                    Reset above data\n                </Button>\n                <Button type=\"submit\" size=\"sm\" variant=\"primary\" className=\"float-right\">\n                    Calculate {values['company'] ? 'for ' + values['company'] : ''}\n                </Button>\n            </Form>\n        </Col>\n    </Row>;\n}","import {Button, Table} from \"react-bootstrap\";\n\nexport default function Company(props) {\n    const company = props.company;\n\n    const removeCompany = (id, name) => {\n        if (window.confirm(`Remove ${name} from the list?`)) {\n            props.removeCompany(id);\n        }\n    }\n\n    return <Table size=\"sm\" style={{paddingTop: 5, borderTop: '#000 2px solid'}}>\n        <thead>\n            <tr>\n                <th>As (in {company.name})</th>\n                <th>Received Income (BDT.)</th>\n                <th>Max exempted Income (BDT.)</th>\n                <th>Net Taxable Amount (BDT.)</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Basic</td>\n                <td>{company.basic.yearly}</td>\n                <td>{company.basic.exempted}</td>\n                <td>{company.basic.taxable}</td>\n            </tr>\n            <tr>\n                <td>House rent</td>\n                <td>{company.house.yearly}</td>\n                <td>{company.house.exempted}</td>\n                <td>{company.house.taxable}</td>\n            </tr>\n            <tr>\n                <td>Medical Allowance</td>\n                <td>{company.medical.yearly}</td>\n                <td>{company.medical.exempted}</td>\n                <td>{company.medical.taxable}</td>\n            </tr>\n            <tr>\n                <td>Conveyance Allowance</td>\n                <td>{company.conveyance.yearly}</td>\n                <td>{company.conveyance.exempted}</td>\n                <td>{company.conveyance.taxable}</td>\n            </tr>\n            <tr>\n                <td>Leave Fare Assistance</td>\n                <td>{company.lfa.yearly}</td>\n                <td>{company.lfa.exempted}</td>\n                <td>{company.lfa.taxable}</td>\n            </tr>\n            <tr>\n                <td>Festival Bonus</td>\n                <td>{company.festival.yearly}</td>\n                <td>{company.festival.exempted}</td>\n                <td>{company.festival.taxable}</td>\n            </tr>\n            <tr>\n                <td>Others</td>\n                <td>{company.others.yearly}</td>\n                <td>{company.others.exempted}</td>\n                <td>{company.others.taxable}</td>\n            </tr>\n            <tr>\n                <td><b>TOTAL</b></td>\n                <td><b>{company.gross}</b></td>\n                <td><b>{company.net_exempted}</b></td>\n                <td><b>{company.net_taxable}</b></td>\n            </tr>\n            <tr>\n                <td colSpan=\"4\" className=\"text-right\">\n                    <Button onClick={() => removeCompany(company.id, company.name)} size=\"sm\" variant=\"danger\" block>\n                        Remove [{company.name}'s earnings -\n                        {` ${company.months}`} months -\n                        {` ${company.festivals}`} festivals] from this list\n                    </Button>\n                </td>\n            </tr>\n        </tbody>\n    </Table>;\n}","import {Col, Row} from \"react-bootstrap\";\nimport SalaryBreakdown from \"./Company\";\n\nexport default function CompanyList(props) {\n    const companies = props.companies;\n\n    return <Row style={{marginTop: 5}}>\n        <Col xs=\"12\" className=\"table-responsive\">\n            {\n                companies.map(company => {\n                    return <SalaryBreakdown removeCompany={props.removeCompany}\n                                            key={company.id}\n                                            company={company}/>\n                })\n            }\n        </Col>\n    </Row>;\n}","import UserInformation from \"./UserInformation\";\nimport SalaryInformation from \"./SalaryInformation\";\nimport CompanyList from \"./CompanyList\";\n\nexport default function LeftSideContent(props) {\n    return <div>\n        <UserInformation handleInputChange={props.handleInputChange}/>\n        <SalaryInformation handleInputChange={props.handleInputChange}/>\n        <CompanyList companies={props.companies} removeCompany = {props.removeCompany}/>\n    </div>;\n}","import {Col, Form, Row, Table} from \"react-bootstrap\";\nimport {useRef, useState} from \"react\";\n\nexport default function RightSideContent(props) {\n    const {minimumTax, lowerBound, companies} = props.values;\n\n    const [aitRef, investmentRef] = [useRef(), useRef()];\n\n    const [values, setValues] = useState({\n        ait: 0,\n        investment: 0,\n    });\n\n\n    const handleChange = (name, value) => {\n        value = parseInt(value || 0, 10);\n\n        setValues(prevState => ({\n            ...prevState,\n            [name]: value\n        }));\n    }\n\n    const totalTaxableAmount = () => {\n        return companies.reduce((p, c) => p + c.net_taxable, 0);\n    }\n\n    const investmentSlabs = (taxableIncome) => {\n        const slabs = [];\n        if (taxableIncome > 3000000) {\n            slabs.push([.15, 250000]);\n            slabs.push([.12, 500000]);\n            slabs.push([.1]);\n        } else if (taxableIncome > 1000000) {\n            slabs.push([.15, 250000]);\n            slabs.push([.12]);\n        } else {\n            slabs.push([.15]);\n        }\n\n        return slabs;\n    }\n\n    const maxAllowedInvestment = () => {\n        return Math.min(.25 * totalTaxableAmount(), 15000000, values['investment']); // max can be 1.5Crore\n    }\n\n    const maxInvestmentRebate = () => {\n        if (!values['investment']) {\n            return 0;\n        }\n\n        const taxableIncome = totalTaxableAmount();\n        if (!taxableIncome) {\n            return 0;\n        }\n\n        const slabs = investmentSlabs(taxableIncome);\n        let rebate = 0;\n        let investment = maxAllowedInvestment();\n\n        for (let i = 0; i < slabs.length; ++i) {\n            let percent = slabs[i][0];\n            let upperBound = slabs[i][1] ?? investment;\n            if (upperBound > investment) {\n                upperBound = investment;\n                investment = 0;\n            } else {\n                investment -= upperBound;\n            }\n\n            rebate = rebate + upperBound * percent;\n            if (investment === 0) {\n                break;\n            }\n        }\n\n        return rebate;\n    }\n\n    const taxBreakdown = () => {\n        let breakdown = {\n            gross: 0,\n            slabs: [\n                {\n                    next: lowerBound,\n                    text: 'From 0 to ' + lowerBound,\n                    as: '0%',\n                    percent: 0,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: 100000,\n                    text: 'For remaining next ' + 100000,\n                    as: '5%',\n                    percent: 0.05,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: 300000,\n                    text: 'For remaining next 300000',\n                    as: '10%',\n                    percent: 0.1,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: 400000,\n                    text: 'For remaining next 400000',\n                    as: '15%',\n                    percent: 0.15,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: 500000,\n                    text: 'For remaining next ' + 500000,\n                    as: '20%',\n                    percent: 0.2,\n                    remains: 0,\n                    tax: 0,\n                }, {\n                    next: undefined,\n                    text: 'For remaining everything else',\n                    as: '25%',\n                    percent: 0.25,\n                    remains: 0,\n                    tax: 0,\n                }\n            ]\n        };\n\n        let gross = 0, taxable = totalTaxableAmount();\n        if (!taxable) {\n            return breakdown;\n        }\n\n        if (taxable < lowerBound) {\n            return breakdown;\n        }\n\n        for (let i = 0; i < breakdown['slabs'].length; ++i) {\n            // get the current slab\n            let current = breakdown['slabs'][i];\n            // get the upper bound of this slab\n            let limit = current['next'];\n            // if no upper bound is defined, then remaining taxable is the upper bound\n            if (limit === undefined) {\n                limit = taxable;\n            }\n\n            // taxable reached the maximum limit\n            if (taxable <= limit) {\n                limit = taxable;\n                taxable = 0;\n            } else {\n                taxable -= limit;\n            }\n\n            let thisSlab = current['percent'] * limit;\n            breakdown['slabs'][i].tax = thisSlab;\n            breakdown['slabs'][i].remains = taxable;\n            gross += thisSlab;\n        }\n\n        breakdown.gross = gross && gross < minimumTax ? minimumTax : gross;\n\n        return breakdown;\n    }\n\n    const rebate = maxInvestmentRebate();\n\n    const netTaxableAmount = totalTaxableAmount();\n\n    const maxInvestment = maxAllowedInvestment();\n\n    const breakdown = taxBreakdown();\n\n    let finalLiability = breakdown['gross'] - (breakdown['gross'] ? rebate : 0) - (breakdown['gross'] ? values['ait'] : 0);\n    if (finalLiability < 0) {\n        finalLiability = 0;\n    }\n\n    return <Row>\n        <Col xs=\"12\">\n            <Form.Group>\n                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                              onChange={() => handleChange('ait', aitRef.current.value)}\n                              value={values['ait']} ref={aitRef} placeholder=\"Processed AIT by Company\"/>\n                <Form.Text className=\"text-info\">\n                    Advance Income Tax [Deducted by Company]\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Control type=\"number\" min=\"0\" className=\"form-control-sm\"\n                              onChange={() => handleChange('investment', investmentRef.current.value)}\n                              value={values['investment']} ref={investmentRef}\n                              placeholder=\"Total allowable Investment\"/>\n                <Form.Text className=\"text-info\">\n                    Allowable total investment\n                </Form.Text>\n            </Form.Group>\n\n            <Table size=\"sm\">\n                <tbody>\n                    <tr>\n                        <td>Minimum tax</td>\n                        <td><b>{minimumTax}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Minimum taxable income</td>\n                        <td><b>{lowerBound}</b></td>\n                    </tr>\n                    <tr>\n                        <td>AIT</td>\n                        <td><b>{values['ait']}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Total investment</td>\n                        <td><b>{values['investment']}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Max allowed investment</td>\n                        <td><b>{maxInvestment}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Total taxable income</td>\n                        <td><b>{netTaxableAmount}</b></td>\n                    </tr>\n                    <tr>\n                        <td>Rebate from investment</td>\n                        <td><b>{rebate}</b></td>\n                    </tr>\n                </tbody>\n            </Table>\n            <hr/>\n            <p className='text-secondary text-center'>Tax breakdown</p>\n            <div className=\"table-responsive\">\n                <Table size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Total Income</th>\n                            <th>Percentage</th>\n                            <th>Calculated Tax</th>\n                            <th>Remaining</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            breakdown.slabs.map((slab, k) => {\n                                return <tr key={k}>\n                                    <td>{slab.text}</td>\n                                    <td className=\"text-center\">{slab.as}</td>\n                                    <td className=\"text-right\">{slab.tax}</td>\n                                    <td className=\"text-right\">{slab.remains}</td>\n                                </tr>\n                            })\n                        }\n                        <tr>\n                            <td><b>Minimum/Gross Tax</b></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                <b>{breakdown['gross']}</b>\n                            </td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td><b>Investment rebate</b></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                <b> - {breakdown['gross'] ? rebate : 0}</b>\n                            </td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td><b>AIT deduction</b></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                <b> - {values['ait']}</b>\n                            </td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td><b>Net Tax liability</b></td>\n                            <td></td>\n                            <td className=\"text-right\">\n                                <b> = {finalLiability}</b>\n                            </td>\n                            <td></td>\n                        </tr>\n                    </tbody>\n                </Table>\n            </div>\n        </Col>\n    </Row>;\n}","import React, {useEffect, useState} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport TopNav from \"./TopNav\";\nimport LeftSideContent from \"./LeftSideContent\";\nimport RightSideContent from \"./RightSideContent\";\n\nfunction today() {\n    return new Date().toLocaleDateString([], {\n        year: 'numeric',\n        month: '2-digit',\n        day: 'numeric',\n    }).replace(/^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/, \"$3$1$2\");\n}\n\nfunction namespace() {\n    return 'bd-income-tax-calculator';\n}\n\nfunction App() {\n\n    const [values, setValues] = useState({\n        lowerBound: 300000,\n        minimumTax: 5000,\n        companies: [],\n        lifetimeVisitor: 0,\n        dailyVisitor: 0\n    });\n\n    const {companies} = values;\n\n    function handleInputChange(field, value) {\n        setValues(prev => ({\n            ...prev,\n            [field]: field === 'companies' ? [...prev['companies'], value] : value\n        }));\n    }\n\n    function removeCompany(id) {\n        setValues(prev => ({\n            ...prev,\n            'companies': prev['companies'].filter(c => c.id !== id),\n        }))\n    }\n\n    useEffect(() => {\n        // get site lifetime visitors\n        window.fetch(`https://api.countapi.xyz/hit/${namespace()}`).then(res => res.json()).then(response => {\n            handleInputChange('lifetimeVisitor', response.value ?? 0);\n        }).catch(error => {\n            console.log(\"Cannot get lifetime visitor.\");\n            console.log(error);\n        });\n\n        // get site daily visitors\n        window.fetch(`https://api.countapi.xyz/hit/${namespace()}-${today()}`).then(res => res.json()).then(response => {\n            handleInputChange('dailyVisitor', response.value ?? 0);\n        }).catch(error => {\n            console.log(\"Cannot get today's visitor.\");\n            console.log(error);\n        });\n\n    }, []);\n\n    return (\n        <>\n            <TopNav daily={values['dailyVisitor']} lifetime={values['lifetimeVisitor']}/>\n            <Container fluid>\n                <Row style={{marginTop: 3}}>\n                    <Col xs={12} md=\"8\">\n                        <LeftSideContent\n                            handleInputChange={handleInputChange}\n                            companies={companies}\n                            removeCompany={removeCompany}\n                        />\n                    </Col>\n                    <Col xs={12} md=\"4\">\n                        <RightSideContent\n                            values={values}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}